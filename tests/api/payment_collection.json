{
	"info": {
		"_postman_id": "2a5ae6c7-2f92-46d4-a235-fc612ac97243",
		"name": "payment service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43015397"
	},
	"item": [
		{
			"name": "create payment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code is 201', function () {",
							"    pm.expect(pm.response.code).to.equal(201);",
							"})",
							"",
							"pm.test('Response has the required field - paymentUrl', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.paymentUrl).to.exist;",
							"})",
							"",
							"pm.test('PaymentUrl should not be empty', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.paymentUrl).to.exist.and.to.not.be.empty;",
							"})",
							"",
							"pm.test('Content-Type header is application/json', function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"orderId\": \"ORDER123457\",\r\n  \"amount\": 69000,\r\n  \"sellerId\": 1,\r\n  \"orderInfo\": \"Payment for Order ORDER123457\",\r\n  \"language\": \"vn\",\r\n  \"bankCode\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://34.58.241.34:3007/payment/create-payment-url",
					"protocol": "http",
					"host": [
						"34",
						"58",
						"241",
						"34"
					],
					"port": "3007",
					"path": [
						"payment",
						"create-payment-url"
					]
				}
			},
			"response": []
		},
		{
			"name": "add seller bank account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code is 201', function () {",
							"    pm.expect(pm.response.code).to.equal(201);",
							"})",
							"",
							"pm.test('Success field is present and set to true', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.have.property('success', true);",
							"})",
							"",
							"pm.test('Data object structure is valid', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.be.an('object');",
							"    pm.expect(responseData.data.id).to.be.a('number');",
							"    pm.expect(responseData.data.sellerId).to.be.a('number');",
							"    pm.expect(responseData.data.bankName).to.be.a('string');",
							"    pm.expect(responseData.data.accountNumber).to.be.a('string');",
							"    pm.expect(responseData.data.accountHolderName).to.be.a('string');",
							"    pm.expect(responseData.data.isDefault).to.be.a('boolean');",
							"    pm.expect(responseData.data.createdAt).to.be.a('string');",
							"    pm.expect(responseData.data.updatedAt).to.be.a('string');",
							"})",
							"",
							"pm.test('IsDefault field is a boolean value', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data.isDefault).to.be.a('boolean');",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"sellerId\": 1,\r\n  \"bankName\": \"Vietcombank\",\r\n  \"accountNumber\": \"0123456789\",\r\n  \"accountHolderName\": \"NGUYEN VAN A\",\r\n  \"isDefault\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://34.58.241.34:3007/payment/add-bank-account",
					"protocol": "http",
					"host": [
						"34",
						"58",
						"241",
						"34"
					],
					"port": "3007",
					"path": [
						"payment",
						"add-bank-account"
					]
				}
			},
			"response": []
		},
		{
			"name": "get seller bank account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('data').that.is.an('array');",
							"",
							"    responseData.data.forEach(function(item) {",
							"        pm.expect(item).to.have.property('id').that.is.a('number');",
							"        pm.expect(item).to.have.property('sellerId').that.is.a('number');",
							"        pm.expect(item).to.have.property('bankName').that.is.a('string');",
							"        pm.expect(item).to.have.property('accountNumber').that.is.a('string');",
							"        pm.expect(item).to.have.property('accountHolderName').that.is.a('string');",
							"        pm.expect(item).to.have.property('isDefault').that.is.a('boolean');",
							"        pm.expect(item).to.have.property('createdAt').that.is.a('string');",
							"        pm.expect(item).to.have.property('updatedAt').that.is.a('string');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Account number is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  responseData.data.forEach(function(account) {",
							"    pm.expect(account.accountNumber).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Account number should not be empty\");",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"CreatedAt and updatedAt are in valid date format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.data).to.be.an('array');",
							"  ",
							"  responseData.data.forEach(function(account) {",
							"    pm.expect(account.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"createdAt should be in valid date format\");",
							"    pm.expect(account.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"updatedAt should be in valid date format\");",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Data array is present in the response and contains the expected number of elements\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('array').with.lengthOf(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://34.58.241.34:3007/payment/seller/1/bank-accounts",
					"protocol": "http",
					"host": [
						"34",
						"58",
						"241",
						"34"
					],
					"port": "3007",
					"path": [
						"payment",
						"seller",
						"1",
						"bank-accounts"
					]
				}
			},
			"response": []
		},
		{
			"name": "trigger payout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 202\", function () {",
							"    pm.expect(pm.response.code).to.equal(202);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Message field exists in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property('message');",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is within an acceptable range\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(300);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://34.58.241.34:3007/payment/trigger-payout",
					"protocol": "http",
					"host": [
						"34",
						"58",
						"241",
						"34"
					],
					"port": "3007",
					"path": [
						"payment",
						"trigger-payout"
					]
				}
			},
			"response": []
		}
	]
}