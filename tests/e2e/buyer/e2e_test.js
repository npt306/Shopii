const { Builder, By, Key, until } = require('selenium-webdriver');
const path = require('path');

async function login(driver) {
    await driver.get('http://34.58.241.34:8000/login');
    await driver.findElement(By.name('username')).sendKeys('nptai8386@gmail.com');
    await driver.findElement(By.name('password')).sendKeys('npt12345', Key.RETURN);

    await driver.wait(async () => {
        let currentUrl = await driver.getCurrentUrl();
        return currentUrl.includes('/home');
    }, 5000);

    console.log('\n‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!');
}

async function navigateToSellerChannel(driver) {
    await driver.findElement(By.linkText('K√™nh ng∆∞·ªùi b√°n')).click();
    await driver.wait(async () => {
        let currentUrl = await driver.getCurrentUrl();
        return currentUrl.includes('/portal/settings/shop/profile/');
    }, 5000);
    console.log('\n‚úÖ ƒê√£ v√†o K√™nh ng∆∞·ªùi b√°n!');

    // B·∫•m v√†o "Qu·∫£n l√Ω s·∫£n ph·∫©m"
    await driver.findElement(By.xpath("//div[contains(@class, 'flex items-center justify-between') and .//span[text()='Qu·∫£n l√Ω s·∫£n ph·∫©m']]")).click();
    console.log('\n‚úÖ ƒê√£ m·ªü menu Qu·∫£n l√Ω s·∫£n ph·∫©m!');

    // Ch·ªù menu m·ªü ra, sau ƒë√≥ b·∫•m v√†o "Th√™m s·∫£n ph·∫©m"
    await driver.wait(async () => {
        let elements = await driver.findElements(By.xpath("//a[@href='/portal/product/new']"));
        return elements.length > 0;
    }, 5000);
    await driver.findElement(By.xpath("//a[@href='/portal/product/new']")).click();
    console.log('\n‚úÖ ƒê√£ v√†o trang Th√™m s·∫£n ph·∫©m!');
}

async function addProduct(driver) {
    await driver.findElement(By.name('product-name')).sendKeys('√Åo thi ƒë·∫•u ƒêTQG Vi·ªát Nam 2025');
    await driver.findElement(By.name('product-description')).sendKeys('M·∫´u √°o ƒë·∫•u t·ª´ Jogarbola s·∫Ω ƒë·ªìng h√†nh c√πng ƒêTQG Vi·ªát Nam trong nƒÉm 2025');
    await driver.findElement(By.name('product-price')).sendKeys('234000');
    await driver.findElement(By.name('product-quantity')).sendKeys('100');

    let productImage = driver.findElement(By.name('product-images'));
    await productImage.sendKeys(path.resolve(__dirname, 'test_sources/ao_DTQG_trang.png'));

    let coverImage = driver.findElement(By.name('product-cover-image'));
    await coverImage.sendKeys(path.resolve(__dirname, 'test_sources/ao_DTQG_do.png'));
    console.log('\n‚úÖ ƒê√£ th√™m ·∫£nh s·∫£n ph·∫©m!');

    // M·ªü menu ch·ªçn ng√†nh h√†ng v√† ƒë·ª£i ph·∫ßn t·ª≠ xu·∫•t hi·ªán
    await driver.wait(until.elementLocated(By.css('[data-name="category-list-container"]')), 10000, 'Kh√¥ng t√¨m th·∫•y menu ch·ªçn ng√†nh h√†ng!');

    await driver.findElement(By.css('[data-name="category-list-container"]')).click();
    console.log('\n‚úÖ ƒê√£ m·ªü menu ch·ªçn ng√†nh h√†ng!');

    // T√¨m t·∫•t c·∫£ c√°c m·ª•c trong danh s√°ch ng√†nh h√†ng
    const categoryItems = await driver.findElements(By.css('[data-name="category-item"]'));

    let found = false;
    for (const category of categoryItems) {
        const categoryText = await category.getText();
        
        if (categoryText === 'Sport & Outdoor') {
            await category.click(); // Ch·ªçn ng√†nh h√†ng
            console.log('\n‚úÖ ƒê√£ ch·ªçn ng√†nh h√†ng Sport & Outdoor!');
            found = true;
            break;
        }
    }

    if (!found) {
        const categoryListContainer = await driver.findElement(By.css('[data-name="category-list-container"]'));
        
        await driver.executeScript('arguments[0].scrollTop = arguments[0].scrollHeight', categoryListContainer);
        console.log('\nüîÑ ƒêang cu·ªôn xu·ªëng ƒë·ªÉ t√¨m ng√†nh h√†ng...');
        
        await addProduct(driver);  // G·ªçi l·∫°i h√†m n·∫øu kh√¥ng t√¨m th·∫•y ng√†nh h√†ng
    } else {
        await driver.findElement(By.name('save-new-product')).click();
        console.log('\n‚úÖ ƒê√£ th√™m s·∫£n ph·∫©m th√†nh c√¥ng!');
    }
}

async function completePurchase(driver, productName, colorName, sizeName, quantity) {
    // Chuy·ªÉn h∆∞·ªõng sang trang homepage c·ªßa buyer
    await driver.get('http://34.58.241.34:8000/home');
    console.log('\n‚úÖ ƒê√£ v√†o trang homepage c·ªßa buyer!');

    // T√¨m s·∫£n ph·∫©m theo t√™n
    const productElements = await driver.findElements(By.css('.today-products .p-2.text-xs.text-left'));
    let selectedProduct = null;
    
    for (let product of productElements) {
        let text = await product.getText();
        if (text.includes(productName)) {
            selectedProduct = product;
            break;
        }
    }

    if (selectedProduct) {
        await selectedProduct.click();
        console.log(`\n‚úÖ ƒê√£ ch·ªçn s·∫£n ph·∫©m: ${productName}`);
    } else {
        console.log(`\n‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m: ${productName}`);
        return;
    }

    // Ch·ªçn m√†u s·∫Øc mong mu·ªën
    const colorOptions = await driver.findElements(By.css('.color-options div'));
    let selectedColor = null;

    for (let color of colorOptions) {
        let colorText = await color.getText();
        if (colorText.includes(colorName)) {
            selectedColor = color;
            break;
        }
    }

    if (selectedColor) {
        await selectedColor.click();
        console.log(`\n‚úÖ ƒê√£ ch·ªçn m√†u s·∫Øc: ${colorName}`);
    } else {
        console.log(`\n‚ùå Kh√¥ng t√¨m th·∫•y m√†u s·∫Øc: ${colorName}`);
        return;
    }

    // Ch·ªçn k√≠ch c·ª° mong mu·ªën
    const sizeOptions = await driver.findElements(By.css('.size-options div'));
    let selectedSize = null;

    for (let size of sizeOptions) {
        let sizeText = await size.getText();
        if (sizeText.includes(sizeName) && !(await size.getAttribute('class')).includes('opacity-50')) {
            selectedSize = size;
            break;
        }
    }

    if (selectedSize) {
        await selectedSize.click();
        console.log(`\n‚úÖ ƒê√£ ch·ªçn k√≠ch c·ª°: ${sizeName}`);
    } else {
        console.log(`\n‚ùå Kh√¥ng t√¨m th·∫•y k√≠ch c·ª° h·ª£p l·ªá: ${sizeName}`);
        return;
    }

    // Ch·ªçn s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
    const quantityInput = await driver.findElement(By.css('input[type="number"]'));
    await quantityInput.clear();
    await quantityInput.sendKeys(quantity.toString());
    console.log(`\n‚úÖ ƒê√£ ch·ªçn s·ªë l∆∞·ª£ng: ${quantity}`);

    // B·∫•m th√™m v√†o gi·ªè h√†ng
    const addToCartButton = await driver.findElement(By.css('.border-[#ee4d2d]'));
    await addToCartButton.click();
    console.log('\n‚úÖ ƒê√£ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng!');

    // M·ªü gi·ªè h√†ng
    const cartButton = await driver.findElement(By.css('.relative.cursor-pointer.group'));
    await cartButton.click();
    console.log('\n‚úÖ ƒê√£ v√†o gi·ªè h√†ng!');

    // Ch·ªçn s·∫£n ph·∫©m trong gi·ªè h√†ng
    const cartItems = await driver.findElements(By.css('.cart-item'));
    for (let item of cartItems) {
        let itemName = await item.findElement(By.css('.item-name')).getText();
        if (itemName.includes(productName)) {
            let productCheckbox = await item.findElement(By.css('input[type="checkbox"]'));
            await productCheckbox.click();
            console.log(`\n‚úÖ ƒê√£ ch·ªçn s·∫£n ph·∫©m trong gi·ªè h√†ng: ${productName}`);
            break;
        }
    }

    // B·∫•m n√∫t mua h√†ng
    const checkoutButton = await driver.findElement(By.css('.w-full.h-[2.5rem].bg-[#ee4d2d]'));
    await checkoutButton.click();
    console.log('\n‚úÖ ƒê√£ b·∫•m mua h√†ng!');
}

(async function runTest() {
    let driver = await new Builder().forBrowser('chrome').build();
    try {
        await login(driver);
        await navigateToSellerChannel(driver);
        await addProduct(driver);
        await completePurchase(driver, "√Åo Thun Tr∆°n Gimme", "Tr·∫Øng", "M", 2);
    } catch (error) {
        console.error('\n‚ùå L·ªói ki·ªÉm th·ª≠:', error);
    } finally {
        await driver.quit();
        console.log('\nüöÄ Test k·∫øt th√∫c!');
    }
})();

